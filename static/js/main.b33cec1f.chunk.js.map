{"version":3,"sources":["shunter.svg","App.js","serviceWorker.js","index.js","snax.svg"],"names":["module","exports","MisterSnaxRedirectDev","MisterSnaxRedirect","location","baseUrl","search","useState","loading","message","state","setState","useEffect","params","URLSearchParams","url","get","fetch","method","then","res","json","body","link","setTimeout","window","href","Error","catch","_err","src","msLogo","className","alt","MisterSnax","document","title","content","getElementById","classList","contains","add","target","rel","to","SpaetzleHunter","remove","shLogo","App","id","basename","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.b33cec1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shunter.cfc93561.svg\";","import React, {useEffect, useState} from 'react';\nimport msLogo from './snax.svg';\nimport shLogo from './shunter.svg'\nimport './App.css';\n\nimport {HashRouter, Route, Link} from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <header className=\"App-header\" id=\"Content\">\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={MisterSnax}/>\n          <Route exact path=\"/mistersnax\" component={MisterSnax}/>\n          <Route exact path=\"/spaetzlehunter\" component={SpaetzleHunter}/>\n          <Route exact path=\"/pd\" component={MisterSnaxRedirectDev}/>\n          <Route exact path=\"/p\" component={MisterSnaxRedirect}/>\n\n        </div>\n      </HashRouter>\n    </header>\n  );\n}\n\nfunction MisterSnaxRedirectDev({location}) {\n  return MisterSnaxRedirect({location, baseUrl: 'https://api-dev.mistersnax.com'})\n}\n\nfunction MisterSnaxRedirect({location: {search}, baseUrl}) {\n  const [state, setState] = useState({loading: true, message: 'Sammelbestellung wird gesucht, ...'})\n\n  useEffect(() => {\n    const params = new URLSearchParams(search);\n    const url = `${baseUrl || 'https://api.mistersnax.com'}/redirects/${params.get('r')}`;\n    fetch(url, {method: 'GET'}).then(res => res.json())\n      .then(body => {\n\n        if (body.link) {\n          setState({\n            message: 'Sammelbestellung gefunden! Leite weiter ...',\n            loading: false\n          });\n          setTimeout(() => {\n            window.location.href = body.link\n          }, 1000)\n        }\n        throw new Error('Not Found')\n      })\n      .catch(_err => setState({message: `Sammelbestellung nicht gefunden :(`, loading: false}));\n  }, [baseUrl, search])\n\n\n  return (\n\n    <div>\n      <img src={msLogo} className={state.loading ? \"App-logo-spinner\" : \"App-logo\"} alt=\"logo\"/>\n      <p>\n        MisterSnax<br/><br/><span className=\"small\">{state.message}</span>\n\n      </p>\n    </div>\n  )\n\n}\n\nconst MisterSnax = function () {\n\n  useEffect(() => {\n    document.title = 'MisterSnax';\n    const content = document.getElementById('Content');\n    if (!content.classList.contains('mrs'))\n      content.classList.add('mrs')\n  })\n\n  return (\n    [\n\n      <img src={msLogo} className=\"App-logo\" alt=\"logo\"/>,\n      <p>\n        MisterSnax<br/><span className=\"small\"> Gruppenbestellungen einfach koordinieren.</span>\n      </p>,\n      <a\n        className=\"App-link\"\n        href=\"https://chrome.google.com/webstore/detail/mistersnax/jmobiglepfamkdimbpcjjaomhinajijp?hl=de&gl=DE\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Get the Extension for Chrome!\n      </a>,\n      <br/>, <br/>, <br/>,\n      <span className=\"small\">\n      Jagst Du gern? <br/>\n      <Link to=\"/sh\" className=\"App-link\">\n        <span rel=\"noopener noreferrer\">\n          Unser Spätzlehunter auch!\n        </span>\n      </Link>\n    </span>,\n    ]\n\n  )\n}\n\nconst SpaetzleHunter = function () {\n\n  useEffect(() => {\n    document.title = 'Spätzlehunter'\n    const content = document.getElementById('Content');\n    if (content.classList.contains('mrs'))\n      content.classList.remove('mrs')\n  }, [])\n\n  return (\n    [\n      <img src={shLogo} className=\"App-logo\" alt=\"logo\"/>,\n      <p>\n        Spätzlehunter - auf der Jagd nach den leckersten Gerichten!\n      </p>,\n      <a\n        className=\"App-link\"\n        href=\"https://chrome.google.com/webstore/detail/mistersnax/jmobiglepfamkdimbpcjjaomhinajijp?hl=de&gl=DE\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Zur Website\n      </a>,\n      <br/>, <br/>, <br/>,\n      <span className=\"small\">\n      Du isst nicht gern allein? <br/>\n      <Link to=\"/mrs\" className=\"App-link\">\n        <p rel=\"noopener noreferrer\">\n          MisterSnax organisiert Deine Gruppenbestellung!\n        </p>\n      </Link>\n  </span>\n    ])\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/snax.cfae8199.svg\";"],"sourceRoot":""}